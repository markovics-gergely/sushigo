const { writeFile, existsSync, mkdirSync } = require('fs');
const { argv } = require('yargs');
require('dotenv').config();

const writeFileUsingFS = (targetPath: string, content: string) => {
  writeFile(targetPath, content, (err: Error) => {
    if (err) { console.log(err); }
    if (content !== '') {
      console.log(`Environment variables generated to ${targetPath}`);
    }
  });
}

// Providing path to the `environments` directory
const envDirectory = './src/environments';

// creates the `environments` directory if it does not exist
if (!existsSync(envDirectory)) {
  mkdirSync(envDirectory);
}

const env: string = (argv as { [x: string]: string })['env'] || 'dev';
// Checks whether command line argument of `prod` was provided signifying production mode
const prod = env === 'prod';

const envVariables = ['baseUrl', 'grant_type', 'client_id', 'client_secret', 'scope', 'token_name', 'refresh_token_name', 'language_token_name', 'theme_token_name']
const envValues = Object.keys(process.env).filter(v => envVariables.includes(v)).map((key) => `    ${key}: '${process.env[key]}'`).join(',\n');

//actual content to be compiled dynamically and pasted into respective environment files
const environmentFileContent = (values: string) => `// This file was autogenerated by dynamically running setEnv.ts and using dotenv for managing API key secrecy
export const environment = {
  production: ${prod},
${values}
};
`;

//creates the `environment.prod.ts` and `environment.ts` file if it does not exist
writeFileUsingFS(`${envDirectory}/environment.prod.ts`, environmentFileContent(prod ? envValues : ''));
writeFileUsingFS(`${envDirectory}/environment.ts`, environmentFileContent(!prod ? envValues : ''));
